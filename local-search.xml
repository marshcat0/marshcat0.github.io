<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javascript.info读书笔记 -- Prototype篇</title>
    <link href="/2021/05/12/javascript-info/"/>
    <url>/2021/05/12/javascript-info/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录自己在学习时的一些<code>notable points</code>。一是为了在读书的时候，对每一小节进行总结，加深印象，提高学习效果，避免“看完即忘”；二是为了在之后回顾的时候，可以迅速地“取精华而废糟粕”，避免把大量的时间浪费在人尽皆知的简单知识上。</p></blockquote><h1 id="Prototypes-inheritance"><a href="#Prototypes-inheritance" class="headerlink" title="Prototypes, inheritance"></a>Prototypes, inheritance</h1><p><a href="https://javascript.info/prototype-inheritance">文章地址</a></p><h2 id="Prototypal-inheritance"><a href="#Prototypal-inheritance" class="headerlink" title="Prototypal inheritance"></a>Prototypal inheritance</h2><h3 id="Prototype"><a href="#Prototype" class="headerlink" title="[[Prototype]]"></a>[[Prototype]]</h3><ol><li>the references can’t go in circles. JavaScript will throw an error if we try to assign <strong>proto</strong> in a circle.</li><li>The value of <strong>proto</strong> can be either an object or null. Other types are ignored.</li><li><code>__proto__</code>是内部的<code>[[Prototype]]</code>的getter/setter，并不完全等同于<code>[[Prototype]]</code>。现代的JavaScript建议我们使用<code>Object.getPrototypeOf/Object.setPrototypeOf</code>来获取/设置原型。</li></ol><h3 id="Writing-doesn’t-use-prototype"><a href="#Writing-doesn’t-use-prototype" class="headerlink" title="Writing doesn’t use prototype"></a>Writing doesn’t use prototype</h3><ol><li>只有在读取属性时才会从原型链上找，赋值/删除操作直接在对象本身上进行。<strong>注意！</strong>访问属性(Accessor properties)是例外，因为赋值是由setter函数处理的。如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  name: <span class="hljs-string">&quot;John&quot;</span>,<br>  surname: <span class="hljs-string">&quot;Smith&quot;</span>,<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">fullName</span>(<span class="hljs-params">value</span>) &#123;<br>    [<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.surname] = value.split(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125;,<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.surname&#125;</span>`</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> admin = &#123;<br>  __proto__: user,<br>  isAdmin: <span class="hljs-literal">true</span><br>&#125;;<br><br>alert(admin.fullName); <span class="hljs-comment">// John Smith (*)</span><br><br><span class="hljs-comment">// setter triggers!</span><br>admin.fullName = <span class="hljs-string">&quot;Alice Cooper&quot;</span>; <span class="hljs-comment">// (**)</span><br><br>alert(admin.fullName); <span class="hljs-comment">// Alice Cooper, state of admin modified</span><br>alert(user.fullName); <span class="hljs-comment">// John Smith, state of user protected</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="for…in-loop"><a href="#for…in-loop" class="headerlink" title="for…in loop"></a>for…in loop</h3><ol><li>The for..in loop iterates over inherited properties too.</li><li>Almost all other key/value-getting methods, such as Object.keys, Object.values and so on ignore inherited properties.</li></ol><p>这一节课后习题<code>Why are both hamsters full</code>可以看下</p><h2 id="F-prototype"><a href="#F-prototype" class="headerlink" title="F.prototype"></a>F.prototype</h2><ol><li><code>F.prototype</code> property is only used when <code>new F</code> is called, it assigns <code>[[Prototype]]</code> of the new object. 如果在创建一个对象后，改变<code>F.prototype</code>，则只会影响下一次用<code>new F</code>创建的对象的<code>[[Prototype]]</code>，已创建的对象的<code>[[Prototype]]</code>则不受影响。</li></ol><h3 id="Default-F-prototype-constructor-property"><a href="#Default-F-prototype-constructor-property" class="headerlink" title="Default F.prototype, constructor property"></a>Default F.prototype, constructor property</h3><ol><li><p>Every function has the <code>&quot;prototype&quot;</code> property even if we don’t supply it.<br>The default <code>&quot;prototype&quot;</code> is an object with the only property <code>constructor</code> that points back to the function itself.<br>即，每个函数都默认有<code>prototype</code>属性，它是<code>&#123;constructor: function itself&#125;</code>，如下图所示。<br><img src="prototype/function-prototype-constructor.svg" alt="函数默认原型"></p></li><li><p>设<code>Rabbit</code>为构造函数，<code>rabbit</code>为<code>Rabbit</code>的实例，则<code>rabbit</code>可<strong>通过原型链</strong>访问到它的构造函数，如下图所示。即<code>rabbit</code>的<code>constructor</code>是从原型链上获取的。<br><img src="prototype/rabbit-prototype-constructor.svg" alt="实例访问构造函数"><br>需要注意的是，JavaScript itself does not ensure the right <code>&quot;constructor&quot;</code> value.</p></li></ol><p>这一节的两道课后习题都可看下</p><h2 id="Native-prototypes"><a href="#Native-prototypes" class="headerlink" title="Native prototypes"></a>Native prototypes</h2><p><img src="prototype/native-prototypes-classes.svg" alt="All of the built-in prototypes have Object.prototype on the top"></p><h3 id="Primitives"><a href="#Primitives" class="headerlink" title="Primitives"></a>Primitives</h3><p>The most intricate thing happens with strings, numbers and booleans.</p><p>As we remember, they are not objects. But if we try to access their properties, temporary wrapper objects are created using built-in constructors String, Number and Boolean. They provide the methods and disappear.</p><p>These objects are created invisibly to us and most engines optimize them out, but the specification describes it exactly this way. Methods of these objects also reside in prototypes, available as String.prototype, Number.prototype and Boolean.prototype.</p><p>课后习题<code>Add the decorating &quot;defer()&quot; to functions</code>中关于<code>apply</code>的可以看看。</p><h2 id="Prototype-methods-objects-without-proto"><a href="#Prototype-methods-objects-without-proto" class="headerlink" title="Prototype methods, objects without proto"></a>Prototype methods, objects without <strong>proto</strong></h2><p><code>__proto__</code>属性在浏览器端略微过时了。以下有三个现代的方法来替代它：</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create(proto, [descriptors])</a> – creates an empty object with given proto as [[Prototype]] and optional property descriptors.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf(obj)</a> – returns the [[Prototype]] of obj.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf(obj, proto)</a> – sets the [[Prototype]] of obj to proto.</li></ol><p>通过<code>Object.create</code>的第二个参数（属性描述符），可以实现更加精确的属性拷贝：</p><blockquote><p>We can use Object.create to perform an object cloning more powerful than copying properties in for..in:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> clone = <span class="hljs-built_in">Object</span>.create(<span class="hljs-built_in">Object</span>.getPrototypeOf(obj), <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptors(obj));<br></code></pre></td></tr></table></figure><blockquote><p>This call makes a truly exact copy of obj, including all properties: enumerable and non-enumerable, data properties and setters/getters – everything, and with the right [[Prototype]].</p></blockquote><h3 id="Brief-history"><a href="#Brief-history" class="headerlink" title="Brief history"></a>Brief history</h3><blockquote><p>Don’t change [[Prototype]] on existing objects if speed matters<br>Javascript引擎对于作用域链的查找做了优化，因此，如果在运行时(原文为<code>on the fly</code>)通过<code>Object.setPrototypeOf</code>或<code>obj.__proto__=</code>更改了原型，就会破坏这种优化，从而影响运行速度。</p></blockquote><h3 id="“Very-plain”-objects"><a href="#“Very-plain”-objects" class="headerlink" title="“Very plain” objects"></a>“Very plain” objects</h3><p>对对象进行赋值时，有一个有趣的现象：对<code>__proto__</code>的赋值有时会不生效。</p><blockquote><p>That shouldn’t surprise us. The <strong>proto</strong> property is special: it must be either an object or null. A string can not become a prototype.<br>解决方法有：</p></blockquote><ol><li>使用<code>Map</code> instead of <code>plain objects</code></li><li>使用<code>Object.create(null)</code></li></ol><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Other methods:</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(obj)</a> / <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values(obj)</a> / <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries(obj)</a> – returns an array of enumerable own string property names/values/key-value pairs.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols">Object.getOwnPropertySymbols(obj)</a> – returns an array of all own symbolic keys.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">Object.getOwnPropertyNames(obj)</a> – returns an array of all own string keys.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys">Reflect.ownKeys(obj)</a> – returns an array of all own keys. 等于<code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">obj.hasOwnProperty(key)</a>: returns true if obj has its own (not inherited) key named key.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>javascript.info读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array.isArray vs instanceof</title>
    <link href="/2021/05/10/array/"/>
    <url>/2021/05/10/array/</url>
    
    <content type="html"><![CDATA[<h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p><code>Array.isArray</code>优于<code>instance of Array</code>。</p><p><code>Array.isArray</code>是<code>ES5</code>的方法： <code>MDN文档</code>：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">MDN Array.isArray</a><br><code>MDN</code>上提到：</p><blockquote><p>When checking for Array instance, Array.isArray is preferred over instanceof because it works through iframes.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;iframe&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(iframe);<br>xArray = <span class="hljs-built_in">window</span>.frames[<span class="hljs-built_in">window</span>.frames.length - <span class="hljs-number">1</span>].Array;<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> xArray(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [1,2,3]</span><br><br><span class="hljs-comment">// Correctly checking for Array</span><br><span class="hljs-built_in">Array</span>.isArray(arr);  <span class="hljs-comment">// true</span><br><span class="hljs-comment">// Considered harmful, because doesn&#x27;t work through iframes</span><br>arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可以看到，在当前页面新创建一个<code>iframe</code>，用<code>iframe</code>中的<code>Array</code>构造函数<code>new</code>一个数组<code>xArray</code>，<code>Array.isArray</code>可以<strong>在当前页面</strong>判断出<code>xArray</code>是一个数组，而<code>instanceof</code>不可以。</p><p>因此<code>Array.isArray</code>优于<code>instance of Array</code>。</p><h2 id="深入一点"><a href="#深入一点" class="headerlink" title="深入一点"></a>深入一点</h2><h3 id="多个global"><a href="#多个global" class="headerlink" title="多个global"></a>多个<code>global</code></h3><blockquote><p>A global object is an object that always exists in the global scope.</p></blockquote><p>根据<a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object">MDN Global object</a>，各个脚本执行上下文有各自的<code>global</code>。浏览器中的<code>window</code>、<code>Node.js</code>中的<code>global</code>都是各自运行环境中的<code>global</code>。</p><p>而浏览器中，各个窗口/<code>iframe</code>，并不共享同一个<code>window</code>。而在不同的<code>window</code>中，<code>Array.prototype</code>也是不同的（若是相同的，则恶意网页修改<code>Array.prototype</code>会引起严重后果）。因此<code>instanceof Array</code>在跨页面/<code>iframe</code>的情况下不适用。</p><h3 id="其他的检测数组的方法"><a href="#其他的检测数组的方法" class="headerlink" title="其他的检测数组的方法"></a>其他的检测数组的方法</h3><p>a.constructor === Array<br>这个方法与<code>instanceof Array</code>类似。<code>a instanceof Array</code>会在<code>a</code>的原型链上向上寻找<code>Array.protype</code>，而若<code>a</code>为数组，则<code>a.__proto__ === a.constructor.prototype === Array.prototype</code>，所以二者类似。</p><p>其他的方法来自<a href="http://web.mit.edu/jwalden/www/isArray.html">这里</a>，作者用了一个有意思的比喻来描述这些方法“叫得像鸭子它就是一个鸭子”。</p><blockquote><p> Another option relies on so-called “duck typing”, where if a value quackslooks like a duckan array then it is a duckan array.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.isArray(&#123; <span class="hljs-attr">constructor</span>: <span class="hljs-built_in">Array</span> &#125;) <span class="hljs-comment">// 通过a.constructor === Array 判断</span><br><span class="hljs-built_in">Array</span>.isArray(&#123; <span class="hljs-attr">push</span>: <span class="hljs-built_in">Array</span>.prototype.push, <span class="hljs-attr">concat</span>: <span class="hljs-built_in">Array</span>.prototype.concat &#125;) <span class="hljs-comment">// 通过判断对象是否有数组的方法判断</span><br><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[object Array]&quot;</span>; &#125;;  <span class="hljs-comment">// 通过a.toString() === &quot;[object Array]&quot; 判断</span><br><span class="hljs-built_in">Array</span>.isArray(&#123; <span class="hljs-attr">__proto__</span>: <span class="hljs-built_in">Array</span>.prototype &#125;) <span class="hljs-comment">// 通过a.__proto__ === Array.prototype判断</span><br><span class="hljs-built_in">Array</span>.isArray(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">0</span> &#125;)  <span class="hljs-comment">// 通过是否有length属性判断</span><br></code></pre></td></tr></table></figure><p>在此不再赘述。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>移动端兼容</title>
    <link href="/2021/04/28/mobile-compatibility/"/>
    <url>/2021/04/28/mobile-compatibility/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近作者在开发移动端会议室系统的过程中，备受跨设备兼容的困扰。前车之鉴，后人之师，在此我把遇到、解决过的兼容性问题列举出来，一是为了做个记录，二也是给大家提供参考。</p><h3 id="iOS上底部安全区的适配"><a href="#iOS上底部安全区的适配" class="headerlink" title="iOS上底部安全区的适配"></a>iOS上底部安全区的适配</h3><p>iOS取消实体home键，改为全面屏手势后，在屏幕底部展示了一个小黑条，而如果写网页的时候不加处理，内容就会被小黑条覆盖掉。解决方法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  // 底部安全区适配<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-built_in">constant</span>(safe-area-inset-bottom); // iOS老版本写法，为了保持向前兼容，也要加上，且要放到前面<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-built_in">env</span>(safe-area-inset-bottom);<br>&#125;<br></code></pre></td></tr></table></figure><p>将以上样式应用于页面外部容器/<strong>定位为fixed且bootom为0（即固定在页面底部显示）的元素</strong>即可。<br>对于安卓机型，作者测试了一下小米10 pro，该机型在开启底部小黑条时，是在屏幕最下方单独为小黑条保留了一部分空间，没有侵入app，所以无需额外设置。</p><h3 id="IOS企业微信端对于fixed元素位置显示错误"><a href="#IOS企业微信端对于fixed元素位置显示错误" class="headerlink" title="IOS企业微信端对于fixed元素位置显示错误"></a>IOS企业微信端对于fixed元素位置显示错误</h3><p>如下两图所示。其中左图为有问题的页面，右图为正常页面。</p><figure><img src="fixed-bug.png" width="49%"><img src="fixed-normal.png" width="49%"></figure><p>bug原因猜测：</p><center><img src="fixed-reason.png" width="49%"></center>如图所示，页面最外层容器没有铺满当前页。将最外层容器高度铺满页面后，bug被修复：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#app</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="height-100vh的问题"><a href="#height-100vh的问题" class="headerlink" title="height: 100vh的问题"></a>height: 100vh的问题</h3><p>在移动端使用100vh可能会出现双重滚动条/底部fixed元素被盖住。拿移动端的chrome举例，浏览器把地址栏也算入到了可视高度内（下滑地址栏可隐藏），因此当展示地址栏的时候，100vh就要比实际的可视高度要高，因此会出现双重滚动条/底部fixed元素被盖住。</p><center><img src="mobile-chrome.jpeg" width="49%"></center><p>解决方法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">min-height</span>: -webkit-fill-available;<br>&#125;<br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">height</span>: -webkit-fill-available;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：<a href="https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/">CSS fix for 100vh in mobile WebKit</a></p><h3 id="大分辨率图片加载不出来的问题"><a href="#大分辨率图片加载不出来的问题" class="headerlink" title="大分辨率图片加载不出来的问题"></a>大分辨率图片加载不出来的问题</h3><blockquote><p>仅安卓端企业微信内置浏览器有问题</p></blockquote><p>经过测试，7088*10630分辨率的图片，安卓端企业微信内置浏览器无法加载出（合理推测大分辨率的加载不出）<br>解决方法是在上传图片的时候制定图片的最大分辨率，超过分辨率则用canvas降分辨率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resizeImg</span> (<span class="hljs-params">file</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBase64</span>(<span class="hljs-params">file</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader()<br>      reader.readAsDataURL(file)<br>      reader.onload = <span class="hljs-function">() =&gt;</span> resolve(reader.result)<br>      reader.onerror = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> reject(error)<br>    &#125;)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getImg</span>(<span class="hljs-params">src</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image()<br>      img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        resolve(img)<br>      &#125;<br>      img.src = src<br>    &#125;)<br>  &#125;<br>    <br>  <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  <span class="hljs-keyword">const</span> src = <span class="hljs-keyword">await</span> getBase64(file)<br>  <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">await</span> getImg(src)<br><br>  <span class="hljs-comment">// 缩放</span><br>  <span class="hljs-comment">// 限制最大x分辨率</span><br>  <span class="hljs-keyword">const</span> x = <span class="hljs-number">1600</span><br>  <span class="hljs-keyword">let</span> width = img.width<br>  <span class="hljs-keyword">let</span> height = img.height<br>  <span class="hljs-keyword">if</span> (width &gt; x) &#123;<br>    height *= x / width<br>    width = x<br>  &#125;<br><br>  <span class="hljs-comment">// 绘画</span><br>  canvas.width = width<br>  canvas.height = height<br>  <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>  ctx.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 转为为提交所需格式</span><br>    canvas.toBlob(<span class="hljs-function">(<span class="hljs-params">blob</span>) =&gt;</span> &#123;<br>      resolve(blob)<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>提交上传图片时，在formData里append处理后的图片即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> form = <span class="hljs-keyword">new</span> FormData()<br><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">await</span> resizeImg(file)<br>form.append(<span class="hljs-string">&#x27;file&#x27;</span>, blob)<br></code></pre></td></tr></table></figure><h3 id="安卓端文字偏上，某些机型尤其明显（使用flex垂直居中时）"><a href="#安卓端文字偏上，某些机型尤其明显（使用flex垂直居中时）" class="headerlink" title="安卓端文字偏上，某些机型尤其明显（使用flex垂直居中时）"></a>安卓端文字偏上，某些机型尤其明显（使用flex垂直居中时）</h3><p>！不知道咋解决，有人知道的话私信我一下谢谢～（叹气）</p><h3 id="不同逻辑分辨率的设备兼容"><a href="#不同逻辑分辨率的设备兼容" class="headerlink" title="不同逻辑分辨率的设备兼容"></a>不同逻辑分辨率的设备兼容</h3><p>鉴于现在主流浏览器对于viewport 单位 (vw, vh, vmin, vmax)支持良好，因此在对于不同逻辑分辨率的设备，可以使用<code>postcss-px-to-viewport</code>插件，来将<code>px</code>单位改成<code>vw</code>单位。<br>需要注意的是: </p><ol><li><code>postcss-px-to-viewport</code>这个插件<code>npm</code>源与<code>github</code>源不一致，<code>npm</code>源会导致一些选项，如<code>include</code>选项无效，而由于<a href="https://github.com/npm/cli/issues/624">npm的bug</a>，在<code>docker</code>中用<code>npm</code>安装<code>github</code>源的文件会失败，从而导致自动部署失败。<br>参考资料：<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#viewport-bu-ju">vant 浏览器适配</a></li><li>经过<code>px</code>到<code>vw</code>的转换后，对于小数点像素（如<code>1.3456px</code>），不同的浏览器有不同的处理策略，可能会导致使用同样样式的线条，有的粗有的细的问题</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为macOS bigsur开启HiDpi</title>
    <link href="/2020/11/23/bigSur-hidpi/"/>
    <url>/2020/11/23/bigSur-hidpi/</url>
    
    <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://sspai.com/post/57549">为 macOS 10.15 开启 HiDPI，让 2K 显示器更舒适</a></li><li><a href="https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/">SCALED RESOLUTIONS<br>for your MacBooks external Monitor</a></li><li><a href="https://apple.stackexchange.com/a/395509">Mount root as writable in Big Sur</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合有一定基础的人～最好有一定的英语阅读能力&amp;基本的shell知识</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>先按参考文档1的步骤，进行到<code>复制 plist 配置文件到系统配置目录</code>这一步时，就走不通了，因为在Big Sur中，苹果对于权限要求更严格，要通过额外的一系列操作才能获取根目录的写入权限了（参看文档3）。</p><p>大概解释一下文档3的意思：</p><ol><li>在恢复模式终端运行<code>csrutil authenticated-root disable</code>(与文档1中<code>csrutil disable</code>方法类似)</li><li>重启回系统，终端运行<code>mount</code>，如图所示<img src="./mount.png" alt="mount"><br>则<code>DISK_PATH</code>为<code>/dev/disk1s1</code>（把最后的s+数字去掉）</li><li>随便创建一个挂载的目录，文中路径为<code>~/mount</code>，即为<code>MOUNT_PATH</code></li><li>运行<code>sudo mount -o nobrowse -t apfs DISK_PATH MOUNT_PATH</code>（用上文的变量替换）</li><li>现在就可以在<code>~/mount</code>下修改系统文件了，如：要修改<code>/temp/1.txt</code>的文件，则应修改<code>~/mount/temp/1.txt</code></li><li>修改完成之后，运行<code>sudo bless --folder MOUNT_PATH/System/Library/CoreServices --bootefi --create-snapshot</code>（注意替换路径）</li><li>重启，修改即生效。下面就可以愉快地打开rdm修改分辨率了～</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
